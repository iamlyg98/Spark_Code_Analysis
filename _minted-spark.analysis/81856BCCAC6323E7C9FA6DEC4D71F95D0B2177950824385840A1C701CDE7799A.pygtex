\begin{Verbatim}[commandchars=\\\{\},codes={\catcode`\$=3\catcode`\^=7\catcode`\_=8}]
\PYG{k}{override} \PYG{k}{def} \PYG{n}{read}\PYG{o}{()}\PYG{k}{:} \PYG{k+kt}{Iterator}\PYG{o}{[}\PYG{k+kt}{Product2}\PYG{o}{[}\PYG{k+kt}{K}, \PYG{k+kt}{C}\PYG{o}{]]} \PYG{k}{=} \PYG{o}{\PYGZob{}}
\PYG{k}{val} \PYG{n}{blockFetcherItr} \PYG{k}{=} \PYG{k}{new} \PYG{n+nc}{ShuffleBlockFetcherIterator}\PYG{o}{(}\PYG{n}{context}\PYG{o}{,}\PYG{n}{blockManager}\PYG{o}{.}\PYG{n}{shuffleClient}\PYG{o}{,}
\PYG{n}{blockManager}\PYG{o}{,}\PYG{n}{mapOutputTracker}\PYG{o}{.}\PYG{n}{getMapSizesByExecutorId}\PYG{o}{(}\PYG{n}{handle}\PYG{o}{.}\PYG{n}{shuffleId}\PYG{o}{,} \PYG{n}{startPartition}\PYG{o}{,} \PYG{n}{endPartition}\PYG{o}{),}
  \PYG{n+nc}{SparkEnv}\PYG{o}{.}\PYG{n}{get}\PYG{o}{.}\PYG{n}{conf}\PYG{o}{.}\PYG{n}{getSizeAsMb}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}spark.reducer.maxSizeInFlight\PYGZdq{}}\PYG{o}{,} \PYG{l+s}{\PYGZdq{}48m\PYGZdq{}}\PYG{o}{)} \PYG{o}{*} \PYG{l+m+mi}{1024} \PYG{o}{*} \PYG{l+m+mi}{1024}\PYG{o}{)}
  \PYG{o}{......}
  \PYG{c+c1}{//获取序列化器}
  \PYG{k}{val} \PYG{n}{ser} \PYG{k}{=} \PYG{n+nc}{Serializer}\PYG{o}{.}\PYG{n}{getSerializer}\PYG{o}{(}\PYG{n}{dep}\PYG{o}{.}\PYG{n}{serializer}\PYG{o}{)}
  \PYG{o}{......}
  \PYG{k}{val} \PYG{n}{interruptibleIter} \PYG{k}{=} \PYG{k}{new} \PYG{n+nc}{InterruptibleIterator}\PYG{o}{[(}\PYG{k+kt}{Any}, \PYG{k+kt}{Any}\PYG{o}{)](}\PYG{n}{context}\PYG{o}{,} \PYG{n}{metricIter}\PYG{o}{)}
  \PYG{k}{val} \PYG{n}{aggregatedIter}\PYG{k}{:} \PYG{k+kt}{Iterator}\PYG{o}{[}\PYG{k+kt}{Product2}\PYG{o}{[}\PYG{k+kt}{K}, \PYG{k+kt}{C}\PYG{o}{]]} \PYG{k}{=} \PYG{k}{if} \PYG{o}{(}\PYG{n}{dep}\PYG{o}{.}\PYG{n}{aggregator}\PYG{o}{.}\PYG{n}{isDefined}\PYG{o}{)} \PYG{o}{\PYGZob{}}\PYG{c+c1}{//需要聚合}
    \PYG{k}{if} \PYG{o}{(}\PYG{n}{dep}\PYG{o}{.}\PYG{n}{mapSideCombine}\PYG{o}{)} \PYG{o}{\PYGZob{}}\PYG{c+c1}{//需要map端聚合}
      \PYG{k}{val} \PYG{n}{combinedKeyValuesIterator} \PYG{k}{=} \PYG{n}{interruptibleIter}\PYG{o}{.}\PYG{n}{asInstanceOf}\PYG{o}{[}\PYG{k+kt}{Iterator}\PYG{o}{[(}\PYG{k+kt}{K}, \PYG{k+kt}{C}\PYG{o}{)]]}
      \PYG{n}{dep}\PYG{o}{.}\PYG{n}{aggregator}\PYG{o}{.}\PYG{n}{get}\PYG{o}{.}\PYG{n}{combineCombinersByKey}\PYG{o}{(}
      \PYG{n}{combinedKeyValuesIterator}\PYG{o}{,} \PYG{n}{context}\PYG{o}{)}
    \PYG{o}{\PYGZcb{}} \PYG{k}{else} \PYG{o}{\PYGZob{}}\PYG{c+c1}{//只需在reduce端聚合}
      \PYG{k}{val} \PYG{n}{keyValuesIterator} \PYG{k}{=} \PYG{n}{interruptibleIter}\PYG{o}{.}\PYG{n}{asInstanceOf}\PYG{o}{[}\PYG{k+kt}{Iterator}\PYG{o}{[(}\PYG{k+kt}{K}, \PYG{k+kt}{Nothing}\PYG{o}{)]]}
      \PYG{n}{dep}\PYG{o}{.}\PYG{n}{aggregator}\PYG{o}{.}\PYG{n}{get}\PYG{o}{.}\PYG{n}{combineValuesByKey}\PYG{o}{(}\PYG{n}{keyValuesIterator}\PYG{o}{,} \PYG{n}{context}\PYG{o}{)}
    \PYG{o}{\PYGZcb{}}
  \PYG{o}{\PYGZcb{}} \PYG{k}{else} \PYG{o}{\PYGZob{}}\PYG{c+c1}{//不需要聚合}
    \PYG{n}{interruptibleIter}\PYG{o}{.}\PYG{n}{asInstanceOf}\PYG{o}{[}\PYG{k+kt}{Iterator}\PYG{o}{[}\PYG{k+kt}{Product2}\PYG{o}{[}\PYG{k+kt}{K}, \PYG{k+kt}{C}\PYG{o}{]]]}
  \PYG{o}{\PYGZcb{}}
  \PYG{n}{dep}\PYG{o}{.}\PYG{n}{keyOrdering} \PYG{k}{match} \PYG{o}{\PYGZob{}}\PYG{c+c1}{//判断是否需要排序}
    \PYG{k}{case} \PYG{n+nc}{Some}\PYG{o}{(}\PYG{n}{keyOrd}\PYG{k}{:} \PYG{k+kt}{Ordering}\PYG{o}{[}\PYG{k+kt}{K}\PYG{o}{])} \PYG{k}{=\PYGZgt{}}
    \PYG{c+c1}{//对于需要排序的情况使用ExternalSorter进行排序，注意如果spark.shuffle.spill是false，那么数据不会写到磁盘}
      \PYG{k}{val} \PYG{n}{sorter} \PYG{k}{=new} \PYG{n+nc}{ExternalSorter}\PYG{o}{[}\PYG{k+kt}{K}, \PYG{k+kt}{C}, \PYG{k+kt}{C}\PYG{o}{](}\PYG{n}{context}\PYG{o}{,} \PYG{n}{ordering} \PYG{k}{=} \PYG{n+nc}{Some}\PYG{o}{(}\PYG{n}{keyOrd}\PYG{o}{),} \PYG{n}{serializer} \PYG{k}{=} \PYG{n+nc}{Some}\PYG{o}{(}\PYG{n}{ser}\PYG{o}{))}
      \PYG{n}{sorter}\PYG{o}{.}\PYG{n}{insertAll}\PYG{o}{(}\PYG{n}{aggregatedIter}\PYG{o}{)}
      \PYG{o}{......}
      \PYG{n+nc}{CompletionIterator}\PYG{o}{[}\PYG{k+kt}{Product2}\PYG{o}{[}\PYG{k+kt}{K}, \PYG{k+kt}{C}\PYG{o}{]}, \PYG{k+kt}{Iterator}\PYG{o}{[}\PYG{k+kt}{Product2}\PYG{o}{[}\PYG{k+kt}{K}, \PYG{k+kt}{C}\PYG{o}{]]](}\PYG{n}{sorter}\PYG{o}{.}\PYG{n}{iterator}\PYG{o}{,} \PYG{n}{sorter}\PYG{o}{.}\PYG{n}{stop}\PYG{o}{())}
    \PYG{k}{case} \PYG{n+nc}{None} \PYG{k}{=\PYGZgt{}}\PYG{n}{aggregatedIter}
    \PYG{c+c1}{//无需排序}
  \PYG{o}{\PYGZcb{}}
\PYG{o}{\PYGZcb{}}
\end{Verbatim}
